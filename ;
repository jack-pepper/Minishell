/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ms_cmd_cd.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mmalie <mmalie@student.42nice.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/20 12:59:33 by mmalie            #+#    #+#             */
/*   Updated: 2025/04/23 23:30:57 by mmalie           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../inc/minishell.h"

int	cmd_cd(t_shell *sh)
{
	char	*cwd;
	char	*path;
	//char	*cur_path;
	//char	**split_path;
	t_list	*home_var;
	
	cwd = NULL;
	home_var = ft_getenv("HOME", &sh->this_env);
	if (!sh->input_args[1] && (!home_var || !((char **)home_var->content)[1]))
	{		
		printf("bash: cd: HOME non set\n");
		return (-1);
	}
	else if (!sh->input_args[1] && home_var && ((char **)home_var->content)[1])
		path = ((char **)home_var->content)[1];
	else
		path = sh->input_args[1];	
	cwd = store_cwd(cwd);
	if (path[0] == '/')
		change_directory(sh, cwd, path);
	else if (path[0] == '.')
	//	{
	//		path = handle_dotted_path(sh, cwd, path);
			//cur_path = set_cur_path();
	//		change_directory(sh, cur_path);
	//	}

	// - begins with slash => set curpath to the operand, then step 7
	// - first component is dot or dot-dot: step 6
	// else
	free(cwd);
	return (0);
}

char	*handle_dotted_path(t_shell *sh, char *cwd, char *path)
{
	char	**split_path;
	char	*rejoined_path;
	char	*temp;
	int		i;
	size_t		new_path_len;

	new_path_len = ft_strlen(path);
	split_path = ft_split(path, '/');
	if (!split_path)
		return (NULL);
	i = 0;
	while (split_path[i] != NULL)
	{
		if (ft_strcmp(split_path[0], ".") == 0)
		{//Dot components and any slashes that separate them from the next component shall be deleted
			split_path[0][0] = CTRL_CHAR_TO_BE_DELETED;
			new_path_len--;
			i++;
		}
		if (ft_strcmp(split_path[i], "..") == 0)
		{
			if (split_path[i - 1] != NULL) //&& split_path[i - 1]) // add conditions
			{
				split_path[i - 1][0] = CTRL_CHAR_TO_BE_DELETED;
				split_path[i][0] = CTRL_CHAR_TO_BE_DELETED;
				new_path_len - 2;
				i++;
			}
	// For each dot-dot component, if there is a preceding component and it is neither root nor dot-dot, the preceding component, all slashes separating the preceding component from dot-dot, dot-dot and all slashes separating dot-dot from the following component shall be deleted.
		}
		i++;
	}

	// rejoin
	rejoined_path = malloc(new_path_len + 1);
	i = 0;
	j = 0;
	while (split_path[i])
	{
		if (split_path[i][0] != CTRL_CHAR_TO_BE_DELETED)
		{
			rejoined_path[j] = ft_strjoin("/", split_path[i]);
			printf("rejoined_path[%d]: ~%s~", j, rejoined_path[j]); // DEBUG
			j++;
		}
		i++;
	}
	return ();
}

int	change_directory(t_shell *sh, char *cwd, char *path)
{
	if (chdir(path) != 0)
	{
		printf("Error on chdir!\n");
		return (-1);
	}
	update_pwds_vars(sh, cwd, path);
	return (0);
}

void	update_pwds_vars(t_shell *sh, char *prev_cwd, char *new_pwd) // or pass just the new path and join it inside this function?
{
	char	*joined_pwd;
	char	*joined_old_pwd;
	char	**split_pwd;
	char	**split_old_pwd;

	joined_pwd = ft_strjoin("PWD=", new_pwd);
	if (!joined_pwd)
		return ;
	split_pwd = ft_split(joined_pwd, '=');
	free(joined_pwd);
	if (!split_pwd)
		return ;
	update_pwd_var(sh, split_pwd);
	joined_old_pwd = ft_strjoin("OLDPWD=", prev_cwd); // MODIFY TO CUR PWD!
	if (!joined_old_pwd)
		return ;
	split_old_pwd = ft_split(joined_old_pwd, '=');
	free(joined_old_pwd);
	if (!split_old_pwd)
		return ;
	update_old_pwd_var(sh, split_old_pwd);
}

void	update_pwd_var(t_shell *sh, char **split_pwd) // or pass just the new path and join it inside this function?
{
	t_list	*pwd_var;

	pwd_var = ft_getenv("PWD", &sh->this_env);
	if (pwd_var != NULL)
		ft_update_env_value(pwd_var, split_pwd);
	else
		add_new_env_var(sh, split_pwd);
}

void	update_old_pwd_var(t_shell *sh, char **split_old_pwd)
{	
	t_list	*old_pwd_var;

	old_pwd_var = ft_getenv("OLDPWD", &sh->this_env);
	if (old_pwd_var != NULL)
		ft_update_env_value(old_pwd_var, split_old_pwd);
	else
		add_new_env_var(sh, split_old_pwd);
}
